name: Deploy Full-Stack App to Lightsail

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      
      - name: Build Go Backend
        run: |
          cd Backend
          go build -o my-go-app main.go

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Frontend Dependencies & Build
        run: |
          cd Frontend
          npm install
          npm run build

      - name: Copy Files via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: ${{ secrets.LIGHTSAIL_USER }}
          key: ${{ secrets.LIGHTSAIL_SSH_PRIVATE_KEY }}
          source: "Backend/my-go-app,Backend/migrations,Frontend/dist"
          target: "~/MRF_DEPLOY"
          strip_components: 1

      - name: Activate New Version
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: ${{ secrets.LIGHTSAIL_USER }}
          key: ${{ secrets.LIGHTSAIL_SSH_PRIVATE_KEY }}
          script: |
            # Exit immediately if a command exits with a non-zero status
            set -e
            
            echo "=== Starting Deployment ==="
            
            # Install migrate tool if not present
            if ! command -v migrate &> /dev/null; then
              echo "Installing migrate tool..."
              curl -L https://github.com/golang-migrate/migrate/releases/download/v4.17.1/migrate.linux-amd64.tar.gz | tar xvz
              sudo mv migrate /usr/local/bin/migrate
            fi
            
            # Run database migrations
            echo "Running database migrations..."
            migrate -path ~/MRF_DEPLOY/migrations -database "postgres://myapp_user:${{ secrets.DB_PASSWORD }}@localhost:5432/myapp_db?sslmode=disable" up || echo "Migrations may already be up to date"
            
            # Deploy backend
            echo "Deploying backend executable..."
            mv ~/MRF_DEPLOY/my-go-app ~/MRF/Backend/my-go-app
            chmod +x ~/MRF/Backend/my-go-app
            
            # Ensure uploads directory exists
            mkdir -p ~/MRF/Backend/uploads
            
            # Deploy frontend
            echo "Deploying frontend files..."
            sudo rm -rf /var/www/my-react-app/*
            sudo mv ~/MRF_DEPLOY/dist/* /var/www/my-react-app/
            
            # Set permissions
            sudo chown -R www-data:www-data /var/www/my-react-app
            sudo chmod -R 755 /var/www/my-react-app
            
            # Update .env file
            echo "Updating backend .env file..."
            cat > ~/MRF/Backend/.env << EOF
            DB_SOURCE=postgresql://myapp_user:${{ secrets.DB_PASSWORD }}@localhost:5432/myapp_db?sslmode=disable
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
            EOF
            
            # Reload services - Try multiple methods to find pm2
            echo "Reloading backend service..."
            cd ~/MRF/Backend
            
            # Method 1: Try with NVM loading
            if [ -f ~/.nvm/nvm.sh ]; then
              echo "Loading NVM..."
              export NVM_DIR="$HOME/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
              [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
            fi
            
            # Method 2: Try common pm2 paths
            if command -v pm2 &> /dev/null; then
              echo "Found pm2 in PATH"
              pm2 reload go-api --update-env
            elif [ -f /home/ubuntu/.nvm/versions/node/v22.11.0/bin/pm2 ]; then
              echo "Using pm2 at v22.11.0 path"
              /home/ubuntu/.nvm/versions/node/v22.17.1/bin/pm2 reload go-api --update-env
            elif [ -f /usr/local/bin/pm2 ]; then
              echo "Using pm2 at /usr/local/bin"
              /usr/local/bin/pm2 reload go-api --update-env
            else
              echo "WARNING: Could not find pm2! Trying to restart process manually..."
              # Fallback: Kill old process and start new one
              pkill -f my-go-app || true
              nohup ./my-go-app > /dev/null 2>&1 &
              echo "Started backend without pm2"
            fi
            
            # Restart nginx
            echo "Restarting nginx..."
            sudo systemctl restart nginx
            
            # Cleanup
            echo "Cleaning up deployment files..."
            rm -rf ~/MRF_DEPLOY
            
            echo "=== Deployment Complete ==="